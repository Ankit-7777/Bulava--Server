# Generated by Django 5.0.4 on 2024-05-08 09:31

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('RSVP_email', models.EmailField(max_length=254)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, max_length=255, null=True)),
                ('event_date', models.DateField()),
                ('event_start_time', models.TimeField()),
                ('event_end_time', models.TimeField()),
                ('venue_address', models.CharField(max_length=200)),
                ('venue_pin_code', models.CharField(max_length=6)),
                ('is_published', models.BooleanField(default=False)),
                ('max_guests', models.PositiveIntegerField(default=100)),
                ('theme', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='BirthdayParty',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='WeddingApp.event')),
                ('celebrant_name', models.CharField(max_length=100)),
                ('age', models.PositiveIntegerField()),
                ('gift_registry_link', models.URLField(blank=True, null=True)),
                ('dress_code', models.CharField(blank=True, max_length=50, null=True)),
            ],
            bases=('WeddingApp.event',),
        ),
        migrations.CreateModel(
            name='InaugurationEvent',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='WeddingApp.event')),
                ('guest_of_honor', models.CharField(max_length=100)),
                ('organizer_name', models.CharField(max_length=100)),
                ('organizer_contact', models.CharField(max_length=20)),
            ],
            bases=('WeddingApp.event',),
        ),
        migrations.CreateModel(
            name='Wedding',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='WeddingApp.event')),
                ('bride_name', models.CharField(max_length=100)),
                ('groom_name', models.CharField(max_length=100)),
                ('bride_mother_name', models.CharField(max_length=100)),
                ('bride_father_name', models.CharField(max_length=100)),
                ('groom_mother_name', models.CharField(max_length=100)),
                ('groom_father_name', models.CharField(max_length=100)),
                ('wedding_registry_link', models.URLField(blank=True, null=True)),
                ('bride_birth_date', models.DateField()),
                ('groom_birth_date', models.DateField()),
            ],
            bases=('WeddingApp.event',),
        ),
        migrations.AddField(
            model_name='event',
            name='event_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events_category', to='WeddingApp.category'),
        ),
        migrations.CreateModel(
            name='CoverImage',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='covers/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])])),
                ('event_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events_category_type', to='WeddingApp.category')),
            ],
        ),
        migrations.CreateModel(
            name='Guest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('message', models.TextField(blank=True, null=True)),
                ('is_attending', models.BooleanField(default=False)),
                ('dietary_restrictions', models.TextField(blank=True, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='guests', to='WeddingApp.event')),
            ],
        ),
        migrations.CreateModel(
            name='RSVP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Maybe', 'Maybe')], max_length=10)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rsvps', to='WeddingApp.event')),
                ('guest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rsvps', to='WeddingApp.guest')),
            ],
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('service', models.CharField(max_length=100)),
                ('message', models.TextField(blank=True, null=True)),
                ('contact_number', models.CharField(blank=True, max_length=20, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vendors', to='WeddingApp.event')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='Id')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='Email')),
                ('full_name', models.CharField(max_length=255, verbose_name='Full Name')),
                ('phone', models.CharField(max_length=10, verbose_name='Phone')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('role', models.CharField(default='User', max_length=10, verbose_name='Role')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
